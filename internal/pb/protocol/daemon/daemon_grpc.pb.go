// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: daemon.proto

package daemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalAPIClient is the client API for InternalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalAPIClient interface {
	Setup(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error)
	Online(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (InternalAPI_OnlineClient, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	LsRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	LsMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMesagesResponse, error)
	HostStats(ctx context.Context, in *HostStatsRequest, opts ...grpc.CallOption) (*HostStatsResponse, error)
}

type internalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalAPIClient(cc grpc.ClientConnInterface) InternalAPIClient {
	return &internalAPIClient{cc}
}

func (c *internalAPIClient) Setup(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/daemon.InternalAPI/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) Online(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (InternalAPI_OnlineClient, error) {
	stream, err := c.cc.NewStream(ctx, &InternalAPI_ServiceDesc.Streams[0], "/daemon.InternalAPI/Online", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalAPIOnlineClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InternalAPI_OnlineClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type internalAPIOnlineClient struct {
	grpc.ClientStream
}

func (x *internalAPIOnlineClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalAPIClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/daemon.InternalAPI/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/daemon.InternalAPI/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) LsRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, "/daemon.InternalAPI/LsRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) LsMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMesagesResponse, error) {
	out := new(ListMesagesResponse)
	err := c.cc.Invoke(ctx, "/daemon.InternalAPI/LsMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) HostStats(ctx context.Context, in *HostStatsRequest, opts ...grpc.CallOption) (*HostStatsResponse, error) {
	out := new(HostStatsResponse)
	err := c.cc.Invoke(ctx, "/daemon.InternalAPI/HostStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalAPIServer is the server API for InternalAPI service.
// All implementations must embed UnimplementedInternalAPIServer
// for forward compatibility
type InternalAPIServer interface {
	Setup(context.Context, *Config) (*Config, error)
	Online(*ClientInfo, InternalAPI_OnlineServer) error
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	Send(context.Context, *Message) (*Message, error)
	LsRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	LsMessages(context.Context, *ListMessagesRequest) (*ListMesagesResponse, error)
	HostStats(context.Context, *HostStatsRequest) (*HostStatsResponse, error)
	mustEmbedUnimplementedInternalAPIServer()
}

// UnimplementedInternalAPIServer must be embedded to have forward compatible implementations.
type UnimplementedInternalAPIServer struct {
}

func (UnimplementedInternalAPIServer) Setup(context.Context, *Config) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedInternalAPIServer) Online(*ClientInfo, InternalAPI_OnlineServer) error {
	return status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (UnimplementedInternalAPIServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedInternalAPIServer) Send(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedInternalAPIServer) LsRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LsRooms not implemented")
}
func (UnimplementedInternalAPIServer) LsMessages(context.Context, *ListMessagesRequest) (*ListMesagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LsMessages not implemented")
}
func (UnimplementedInternalAPIServer) HostStats(context.Context, *HostStatsRequest) (*HostStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostStats not implemented")
}
func (UnimplementedInternalAPIServer) mustEmbedUnimplementedInternalAPIServer() {}

// UnsafeInternalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalAPIServer will
// result in compilation errors.
type UnsafeInternalAPIServer interface {
	mustEmbedUnimplementedInternalAPIServer()
}

func RegisterInternalAPIServer(s grpc.ServiceRegistrar, srv InternalAPIServer) {
	s.RegisterService(&InternalAPI_ServiceDesc, srv)
}

func _InternalAPI_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.InternalAPI/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).Setup(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_Online_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalAPIServer).Online(m, &internalAPIOnlineServer{stream})
}

type InternalAPI_OnlineServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type internalAPIOnlineServer struct {
	grpc.ServerStream
}

func (x *internalAPIOnlineServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _InternalAPI_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.InternalAPI/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.InternalAPI/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_LsRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).LsRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.InternalAPI/LsRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).LsRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_LsMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).LsMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.InternalAPI/LsMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).LsMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_HostStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).HostStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.InternalAPI/HostStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).HostStats(ctx, req.(*HostStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalAPI_ServiceDesc is the grpc.ServiceDesc for InternalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.InternalAPI",
	HandlerType: (*InternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _InternalAPI_Setup_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _InternalAPI_Scan_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _InternalAPI_Send_Handler,
		},
		{
			MethodName: "LsRooms",
			Handler:    _InternalAPI_LsRooms_Handler,
		},
		{
			MethodName: "LsMessages",
			Handler:    _InternalAPI_LsMessages_Handler,
		},
		{
			MethodName: "HostStats",
			Handler:    _InternalAPI_HostStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Online",
			Handler:       _InternalAPI_Online_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "daemon.proto",
}

// ExternalAPIClient is the client API for ExternalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalAPIClient interface {
	Info(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	Recieve(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type externalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAPIClient(cc grpc.ClientConnInterface) ExternalAPIClient {
	return &externalAPIClient{cc}
}

func (c *externalAPIClient) Info(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := c.cc.Invoke(ctx, "/daemon.ExternalAPI/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAPIClient) Recieve(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/daemon.ExternalAPI/Recieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAPIServer is the server API for ExternalAPI service.
// All implementations must embed UnimplementedExternalAPIServer
// for forward compatibility
type ExternalAPIServer interface {
	Info(context.Context, *Host) (*Host, error)
	Recieve(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedExternalAPIServer()
}

// UnimplementedExternalAPIServer must be embedded to have forward compatible implementations.
type UnimplementedExternalAPIServer struct {
}

func (UnimplementedExternalAPIServer) Info(context.Context, *Host) (*Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedExternalAPIServer) Recieve(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recieve not implemented")
}
func (UnimplementedExternalAPIServer) mustEmbedUnimplementedExternalAPIServer() {}

// UnsafeExternalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAPIServer will
// result in compilation errors.
type UnsafeExternalAPIServer interface {
	mustEmbedUnimplementedExternalAPIServer()
}

func RegisterExternalAPIServer(s grpc.ServiceRegistrar, srv ExternalAPIServer) {
	s.RegisterService(&ExternalAPI_ServiceDesc, srv)
}

func _ExternalAPI_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAPIServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.ExternalAPI/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAPIServer).Info(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalAPI_Recieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAPIServer).Recieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.ExternalAPI/Recieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAPIServer).Recieve(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalAPI_ServiceDesc is the grpc.ServiceDesc for ExternalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.ExternalAPI",
	HandlerType: (*ExternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ExternalAPI_Info_Handler,
		},
		{
			MethodName: "Recieve",
			Handler:    _ExternalAPI_Recieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}
